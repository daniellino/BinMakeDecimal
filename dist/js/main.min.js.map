{"version":3,"sources":["main.js"],"names":["cloneBinArr","popNumArr","resetWholeGeneration","window","location","reload","Array","from","binNumArr","decimVal","document","getElementById","noLeadBinary","givenAns","addUpresult","populateAnsComb","deimalVlaue","innerHTML","length","k","agregate","concat","givenAnsAddUp","takeNum","push","console","log","clickedObjectContainer","makeItHidden","style","display","testForHidingRow","tablRowCount","querySelector","rows","Indx","shuffleArray","i","floor","random","temp","j","Math","newArray","q","indexStr","String","runToCheck","resultAns","myFunctionFalse","body","backgroundColor","color","m","chkMod","innerText","undefined","myFunctionCorrect","cmbAnsFieldContent"],"mappings":"aAAA,IAIMA,aACAC,uBALAC,qBAAuB,WACzBC,OAAOC,SAASC,UAAhBF,UAAgBE,CAAAA,IAAhB,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GADJL,YAAAM,MAAAC,KAAAC,WAKMP,UAAY,GAFZO,SAAS,EAGXC,SAAWC,SAAfC,eAAA,WACIC,YAAJ,EAEAH,SAAII,KAAWH,MAAA,IAAAA,KAASC,UACxB,IAAIG,YAAcJ,SAAlBC,eAAA,iBAEAF,SAAQM,kBAERC,IADIA,IAAAA,EAAcN,GACNO,EAAAA,EAAAA,EAAYR,UAAxBS,OAAAC,IACAC,EAAAA,EAAAC,OAAApB,UAAAkB,GAAA,KAKQN,SAASI,UAAYG,EAFzB,SAAKE,gBACDF,IAAAA,EAAWA,uBAA0BD,YACrCN,EAASI,SAATM,GACHtB,UAAAuB,KAAAD,GACJE,QAAAC,IAAAzB,WAEDa,aAAyBS,EACrBE,QAAIF,IAAUI,aACdJ,kBAQH,SAACK,eACFD,uBAAAE,MAAAC,QAAA,OAGA,SAAAC,mBACA,IAMI,IAAIC,EAAetB,SAASuB,cAAc,iBAAiBC,KAAKhB,OAN3DU,EAAAA,EAATO,EAAwBH,EAAA,EAAAG,IAYO,QAV3BR,SAAAA,cACF,8BAAAQ,EAAA,uBASYN,MAAMC,SANYG,QAOpBvB,SAASuB,cARZF,8BAAmBI,EAAA,uBACpBH,MAAYF,UAEPK,SAAUA,cAEH,8BACJA,EAAA,KAMIN,MAACI,QACL,QAQhB,SAASG,aAAa5B,GAClB,IAAK,IAAI6B,EAAI7B,EAAUU,OAAS,EAAO,EAAJmB,EAAOA,IAAK,CADnD,IAASD,EAAAA,KAATE,MAAsB9B,KAAtB+B,UAAiCF,EAAA,IACnBG,EAAGhC,EAAUU,GACfuB,EAASH,GAAMI,EAAKH,GACpBC,EAAOhC,GAAAA,EAEXA,OAAAA,EA3DRQ,YAAAC,UAAAR,SA8DC,IACD,IAAIkC,SAAWP,aAAa5B,WAD3BoC,EAAA,EAAAA,EAAAD,SAAAzB,OAAA0B,IAAA,CAIG,IAAIC,SAAWC,OAAOF,EAAI,GAE1BC,SAAW,YAAcA,SAFzBnC,SAAImC,eAAsBA,UAC1B5B,UAAA0B,SAAAC,GAUJ,SAASG,aACL,IAAAC,EAAAtC,SAAAC,eAAA,cASA,SAASsC,IAFPD,EAAA/B,UAAA,SACFP,SAAAwC,KAAArB,MAAAsB,gBAAA,UAKIH,EAAUnB,MAAMuB,MAAQ,UACxB,WALKH,IAAAA,IAAAA,EAAAA,EAATI,EAA2B,EAAAA,IACvB,GAAA5C,SAAAT,YAAAqD,GAAA,EACUpC,QAAYS,IAAZT,cAAAA,OAAVoC,EAAUpC,gCAAAA,OAAVjB,YAAAqD,SADA,CAGUxB,IAAMuB,EAAQ3C,SAAxBT,YAAAqD,GAQQ5B,QAAQC,IAAR,iBAAAL,OAA6BgC,EAA7B,yBAAAhC,OAAsDiC,KAJlD7B,GAWhBZ,SAAA0C,UACAC,MAAA7B,wBACAlB,UAAAK,aA5BIkC,EAAYtC,UAASC,WAGrBD,SAASwC,KAAKrB,MAAMsB,gBAAkB,UAF1CtC,SAAS4C,MAAAA,MAAoB,WAgCzBC","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n    window.location.reload();\r\n}\r\nconst binNumArr = [128, 64, 32, 16, 8, 4, 2, 1];\r\nconst cloneBinArr = Array.from(binNumArr);\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet noLeadBinary;\r\nlet clickedObjectContainer;\r\nlet givenAns = document.getElementById('combAns');\r\nlet addUpresult = 0;\r\n/****************************************************************** */\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n/********************************************************************************** */\r\nfunction populateAnsComb() {\r\n    let agregate = '';\r\n    for (let k = 0; k < popNumArr.length; k++) {\r\n        agregate = agregate.concat(popNumArr[k], '+');\r\n        givenAns.innerHTML = agregate;\r\n    }\r\n}\r\n\r\nfunction givenAnsAddUp() {\r\n    let takeNum = clickedObjectContainer.textContent;\r\n    takeNum = parseInt(takeNum);\r\n    popNumArr.push(takeNum);\r\n    console.log(popNumArr);\r\n    // console.log(takeNum);\r\n    addUpresult = addUpresult + takeNum;\r\n    console.log(addUpresult);\r\n    populateAnsComb();\r\n\r\n} //~~~~~~~~~End of Function givenAnsAddUp\r\n/******************************************************************************************************************************************** */\r\n\r\n//~~~~~~~~~~~~~~~~~asked question loop~~~~~~~~~~~~~~~~\r\n/*//////////FUNCTIONS/////////*/\r\nfunction makeItHidden() {\r\n    //function for hidding the clicked cell table row\r\n    clickedObjectContainer.style.display = 'none';\r\n} //hiding\r\n\r\nfunction testForHidingRow() {\r\n    let tablRowCount = document.querySelector('.answersTable').rows.length;\r\n    // console.log(tablRowCount);\r\n    for (var Indx = 1; Indx < tablRowCount + 1; Indx++) {\r\n        if (\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ') td:nth-child(2)>a'\r\n            ).style.display == 'none' &&\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ') td:nth-child(3)>a'\r\n            ).style.display == 'none'\r\n        ) {\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ')'\r\n            ).style.display = 'none';\r\n        } //end of if\r\n    } //end of loop\r\n} //end of function hiding rows\r\n\r\n// console.log(cloneBinArr);\r\n\r\nfunction shuffleArray(binNumArr) {\r\n    for (var i = binNumArr.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = binNumArr[i];\r\n        binNumArr[i] = binNumArr[j];\r\n        binNumArr[j] = temp;\r\n    }\r\n    return binNumArr;\r\n}\r\nvar newArray = shuffleArray(binNumArr);\r\n// console.log(cloneBinArr);\r\nfor (let q = 0; q < newArray.length; q++) {\r\n    var indexStr = String(q + 1);\r\n    // console.log(newArray.length);\r\n    indexStr = 'print_arr' + indexStr;\r\n    // console.log(indexStr);\r\n    document.getElementById(indexStr).innerHTML = newArray[q];\r\n\r\n}\r\n\r\n\r\n/*********************************************End of random shuffling of the options**************/\r\n\r\nfunction runToCheck() {\r\n    // let hidTable = document.querySelector('.answersTable').style.display = 'none';\r\n    //~~~~~~~~~~~~~~~~function definition for correct\r\n    let resultAns = document.getElementById('matchField');\r\n    function myFunctionCorrect() {\r\n        resultAns.innerHTML = 'Correct!';\r\n        document.body.style.backgroundColor = '#96E29A'; //color feedback correct\r\n        givenAns.style.color = '#22E02D';\r\n    } //end of function myFunctionCorrect\r\n    //~~~~~~~~~~~~~~~~function definition for False\r\n    function myFunctionFalse() {\r\n        //injecting a class for changing the color of the FALSE text to red\r\n        resultAns.innerHTML = 'False!';\r\n        document.body.style.backgroundColor = '#FF5760'; //color feedback correct\r\n        resultAns.style.color = '#FF0000';\r\n        function findTheCorrectAns() {\r\n            for (let m = 0; m < 8; m++) {\r\n                if ((decimVal - cloneBinArr[m]) < 0) {\r\n                    console.log(`iterration ${m} ,decimal is smaller than : ${cloneBinArr[m]}`);\r\n                    continue;\r\n                }\r\n                let chkMod = decimVal - cloneBinArr[m];\r\n                console.log(`on iterration ${m},subtracted valu is: ${chkMod}`);\r\n            }\r\n\r\n        }\r\n        findTheCorrectAns();\r\n    }\r\n\r\n    // if (givenAns == '') {\r\n    //     givenAns.innerHTML = `Correct answer is: ${noLeadBinary}, and you didn't choose an option`\r\n    // } else {\r\n    //     givenAns.innerHTML = `You Chose nothing!`;\r\n    // }\r\n    //end of function myFunctionFalse\r\n    //~~~~~~~~~~~~~~~~Main condition~~~~~~~~~~~~~////////////////////////////////\r\n    let cmbAnsFieldContent = givenAns.innerText;\r\n    if (clickedObjectContainer != undefined) {\r\n        if (decimVal == addUpresult) {\r\n            myFunctionCorrect();\r\n        } else {\r\n            myFunctionFalse();\r\n        }\r\n\r\n    } else {\r\n        myFunctionFalse();\r\n    }\r\n} //end of function runToCheck\r\n\r\n/*▐▐▐▐▐▐▐▐▐Assigning shuffled new array elements to HTML cells in the table▐▐▐▐▐▐▐▐▐▐▐*/\r\n"]}