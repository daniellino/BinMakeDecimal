{"version":3,"sources":["main.js"],"names":["cloneBinArr","popNumArr","resetWholeGeneration","window","location","reload","Array","from","binNumArr","decimVal","document","getElementById","noLeadBinary","clickedObjectContainer","givenAns","corAnsArray","floor","Math","random","chosenAnsWithPlus","deimalVlaue","innerHTML","k","length","populateAnsComb","agregate","concat","takeNum","textContent","parseInt","push","addUpresult","testForHidingRow","tablRowCount","querySelector","rows","Indx","style","display","shuffleArray","j","i","newArray","q","indexStr","t","timerNum","setInterval","clearInterval","resultAns","myFunctionCorrect","backgroundColor","m","color","myFunctionFalse","findTheCorrectAns","p","undefined","runToCheck"],"mappings":"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","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nconst binNumArr = [128, 64, 32, 16, 8, 4, 2, 1];\r\nconst cloneBinArr = Array.from(binNumArr);\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet noLeadBinary;\r\nlet clickedObjectContainer;\r\nlet givenAns = document.getElementById(\"combAns\");\r\nlet addUpresult = 0;\r\nlet corAnsArray = [];\r\nlet chosenAnsWithPlus = \"\";\r\n/****************************************************************** */\r\ndecimVal = Math.floor(Math.random() * 256); //Generating random decimal number\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal; //displaying the random decimal number on the page\r\n\r\nconst populateAnsComb = () => {\r\n  //showing the selected number to add on the page\r\n  let agregate = \"\";\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    if (agregate == \"\") {\r\n      agregate = agregate.concat(popNumArr[k]);\r\n      givenAns.innerHTML = agregate;\r\n    } else {\r\n      agregate = agregate.concat(\"+\", popNumArr[k]);\r\n      givenAns.innerHTML = agregate;\r\n    }\r\n  }\r\n};\r\n\r\nconst givenAnsAddUp = () => {\r\n  //collecting the given answer to add up\r\n  let takeNum = clickedObjectContainer.textContent;\r\n  takeNum = parseInt(takeNum);\r\n  popNumArr.push(takeNum);\r\n  addUpresult = addUpresult + takeNum;\r\n  populateAnsComb();\r\n}; //~~~~~~~~~End of Function givenAnsAddUp\r\n\r\nconst makeItHidden = () => {\r\n  //function for hidding the clicked cell table row\r\n  clickedObjectContainer.style.display = \"none\";\r\n};\r\n\r\nconst testForHidingRow = () => {\r\n  let tablRowCount = document.querySelector(\".answersTable\").rows.length;\r\n  // console.log(tablRowCount);\r\n  for (var Indx = 1; Indx < tablRowCount + 1; Indx++) {\r\n    if (\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(2)>a\"\r\n      ).style.display == \"none\" &&\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(3)>a\"\r\n      ).style.display == \"none\"\r\n    ) {\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \")\"\r\n      ).style.display = \"none\";\r\n    } //end of if\r\n  } //end of loop\r\n}; //end of function hiding rows\r\n\r\nconst shuffleArray = (binNumArr) => {\r\n  for (var i = binNumArr.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = binNumArr[i];\r\n    binNumArr[i] = binNumArr[j];\r\n    binNumArr[j] = temp;\r\n  }\r\n  return binNumArr;\r\n};\r\nvar newArray = shuffleArray(binNumArr);\r\n// console.log(cloneBinArr);\r\nfor (let q = 0; q < newArray.length; q++) {\r\n  var indexStr = String(q + 1);\r\n  // console.log(newArray.length);\r\n  indexStr = \"print_arr\" + indexStr;\r\n  // console.log(indexStr);\r\n  document.getElementById(indexStr).innerHTML = newArray[q];\r\n}\r\n\r\n/*******************timer*********************** */\r\nlet t = 0;\r\nlet timerNum = setInterval(() => {\r\n  //function for counting up to 30 seconds\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}, 1000);\r\n/*******************timer*********************** */\r\nconst runToCheck = () => {\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  let resultAns = document.getElementById(\"matchField\");\r\n  const myFunctionCorrect = () => {\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  }; //end of function myFunctionCorrect\r\n  const myFunctionFalse = () => {\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n    const findTheCorrectAns = () => {\r\n      for (let m = 0; m < 8; m++) {\r\n        if (decimVal - cloneBinArr[m] < 0) {\r\n          continue;\r\n        } else if (decimVal == cloneBinArr[m]) {\r\n        }\r\n        decimVal = decimVal - cloneBinArr[m];\r\n        corAnsArray.push(cloneBinArr[m]);\r\n      }\r\n      console.log(corAnsArray);\r\n    };\r\n    findTheCorrectAns();\r\n    if (addUpresult == \"\") {\r\n      givenAns.innerHTML = `Correct answer is: ${corAnsArray}, and you didn't choose an option`;\r\n    } else {\r\n      for (let p = 0; p < popNumArr.length; p++) {\r\n        if (p == 0) {\r\n          chosenAnsWithPlus = chosenAnsWithPlus.concat(popNumArr[p]);\r\n        } else {\r\n          chosenAnsWithPlus = chosenAnsWithPlus.concat(\"+\", popNumArr[p]);\r\n        }\r\n      }\r\n      console.log(chosenAnsWithPlus);\r\n      givenAns.innerHTML = `Correct answer is: ${corAnsArray}. You Chose ${chosenAnsWithPlus} which yields: ${addUpresult}!`;\r\n    }\r\n  };\r\n\r\n  if (clickedObjectContainer != undefined) {\r\n    if (decimVal == addUpresult) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n}; //end of function runToCheck\r\n"]}